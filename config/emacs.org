#+TITLE: My Emacs
#+AUTHOR: Frank Vumbaca

* Package Management
  Sets pakage repositories

#+BEGIN_SRC emacs-lisp
(require 'package)

; List the packages you want
(setq package-list '(evil
		     evil-leader
		     spacemacs-theme
		     projectile
		     powerline
		     elixir-mode
		     ))

; Add Melpa as the default Emacs Package repository
; only contains a very limited number of packages
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
                          '("melpa" . "https://melpa.milkbox.net/packages/") t)

; Activate all the packages (in particular autoloads)
(package-initialize)

; Update your local package index
(unless package-archive-contents
    (package-refresh-contents))

; Install all missing packages
(dolist (package package-list)
    (unless (package-installed-p package)
          (package-install package)))
#+END_SRC

* Evil Mode
  Because this is who I am.
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode t)
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "RET") nil)) ; Disable this here to make link nav easier

(require 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-leader "SPC")
(evil-leader/set-key
  "b" 'switch-to-buffer
  "g" 'magit-status

  "q" 'delete-window

  "j" 'windmove-down
  "k" 'windmove-up
  "h" 'windmove-left
  "l" 'windmove-right

  "J" (lambda () (interactive) (split-window-vertically) (windmove-down))
  "K" (lambda () (interactive) (split-window-vertically))
  "H" (lambda () (interactive) (split-window-horizontally))
  "L" (lambda () (interactive) (split-window-horizontally) (windmove-right))
  
  "n" (lambda () (interactive) (find-file "~/notes/index.org"))
  
  "," (lambda () (interactive) (find-file "~/.emacs.d/config.org"))

  "W" 'save-buffer)
#+END_SRC

* Org Mode
  Org mode settings.
#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)

(unless (package-installed-p 'org-bullets)
  (package-install 'org-bullets))
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+END_SRC

* maGit

#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'magit)
  (package-install 'magit))
(require 'magit)
(global-set-key (kbd "C-x g") 'magit-status)

(unless (package-installed-p 'evil-magit)
  (package-install 'evil-magit))
(require 'evil-magit)
#+END_SRC

* Looks

** Theme
  Theme stuff.
#+BEGIN_SRC emacs-lisp
(load-theme `spacemacs-dark)
(powerline-default-theme)
#+END_SRC

** Emacs GUI settings
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

* Projectile Configuration
  Project management.
#+BEGIN_SRC emacs-lisp
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(projectile-register-project-type 'makefile '("Makefile")
                  :compile "make build"
                  :test "make test")
#+END_SRC

* Utils

** General
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t) ; Auto reload files

(unless (package-installed-p 'exec-path-from-shell)
  (package-install 'exec-path-from-shell))

(when (memq window-system '(mac ns x)) ; Syncs $MANPATH, $PATH and exec-path with shell config 
  (exec-path-from-shell-initialize))   ; (does not work on windows)

(desktop-save-mode 1)

(unless (package-installed-p 'emojify)
  (package-install 'emojify))
(require `emojify)
(global-emojify-mode t)

#+END_SRC

** Ido Configuration
   Fuzzy search and auto complete.
 #+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)

(unless (package-installed-p 'ido-completing-read+)
  (package-install 'ido-completing-read+))
  
(ido-mode 1)
 #+END_SRC

** Window Management
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'ace-window)
  (package-install 'ace-window))

(require `ace-window)
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

* Language Stuff
** General Stuff
#+BEGIN_SRC emacs-lisp
;; Dont use tabs for indenting
(setq-default indent-tabs-mode nil)

(unless (package-installed-p 'flycheck)
  (package-install 'flycheck))
(require `flycheck)

(global-flycheck-mode)

(unless (package-installed-p 'rainbow-delimiters)
  (package-install 'rainbow-delimiters))

(unless (package-installed-p 'paredit)
  (package-install 'paredit))
(unless (package-installed-p 'evil-paredit)
  (package-install 'evil-paredit))

#+END_SRC

** Common Lisp

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'slime)
  (package-install 'slime))
(require 'slime)
(setq inferior-lisp-program "/usr/local/bin/clisp")
(setq slime-contribs '(slime-fancy))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
; Base mode
(unless (package-installed-p 'clojure-mode)
  (package-install 'clojure-mode))
; Better clojure syntax highlighting
(unless (package-installed-p 'clojure-mode-extra-font-locking)
  (package-install 'clojure-mode))
  
; Repl
(unless (package-installed-p 'cider)
  (package-install 'cider))
(require 'cider)

; Enable helpful modes when editing clojure
(add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
(add-hook 'clojure-mode-hook #'enable-paredit-mode)
(add-hook 'clojure-mode-hook 'evil-paredit-mode)

#+END_SRC

** Elixir Support
   # TODO Properly configure alchemist
#+BEGIN_SRC emacs-lisp
(require 'elixir-mode)
;; Create a buffer-local hook to run elixir-format on save, only when we enable elixir-mode.
;;(add-hook 'elixir-mode-hook
  ;;(lambda () (add-hook 'before-save-hook 'elixir-format nil t)))
;; Elixir lang support
(unless (package-installed-p 'alchemist)
  (package-install 'alchemist))
(require 'alchemist)
#+END_SRC


